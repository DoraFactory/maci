/**
 * This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  CosmWasmClient,
  SigningCosmWasmClient,
  ExecuteResult,
} from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import {
  Addr,
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  Uint256,
  Timestamp,
  Uint64,
  PubKey,
  RoundInfo,
  VotingTime,
  WhitelistBase,
  WhitelistBaseConfig,
  QueryMsg,
  Config,
  Boolean,
  ArrayOfOperatorInfo,
  OperatorInfo,
} from './ApiSaas.types';
export interface ApiSaasReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  operators: () => Promise<ArrayOfOperatorInfo>;
  isOperator: ({ address }: { address: Addr }) => Promise<Boolean>;
  balance: () => Promise<Uint128>;
  maciCodeId: () => Promise<Uint64>;
  treasuryManager: () => Promise<Addr>;
}
export class ApiSaasQueryClient implements ApiSaasReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.operators = this.operators.bind(this);
    this.isOperator = this.isOperator.bind(this);
    this.balance = this.balance.bind(this);
    this.maciCodeId = this.maciCodeId.bind(this);
    this.treasuryManager = this.treasuryManager.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    });
  };
  operators = async (): Promise<ArrayOfOperatorInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      operators: {},
    });
  };
  isOperator = async ({ address }: { address: Addr }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_operator: {
        address,
      },
    });
  };
  balance = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance: {},
    });
  };
  maciCodeId = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      maci_code_id: {},
    });
  };
  treasuryManager = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      treasury_manager: {},
    });
  };
}
export interface ApiSaasInterface extends ApiSaasReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: (
    {
      admin,
      denom,
    }: {
      admin?: Addr;
      denom?: string;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateMaciCodeId: (
    {
      codeId,
    }: {
      codeId: number;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  updateAmaciRegistryContract: (
    {
      registryContract,
    }: {
      registryContract: Addr;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  addOperator: (
    {
      operator,
    }: {
      operator: Addr;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  removeOperator: (
    {
      operator,
    }: {
      operator: Addr;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  deposit: (
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  withdraw: (
    {
      amount,
      recipient,
    }: {
      amount: Uint128;
      recipient?: Addr;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  createMaciRound: (
    {
      certificationSystem,
      circuitType,
      coordinator,
      endTime,
      maxVoters,
      roundInfo,
      startTime,
      voteOptionMap,
      whitelistBackendPubkey,
    }: {
      certificationSystem: Uint256;
      circuitType: Uint256;
      coordinator: PubKey;
      endTime: Timestamp;
      maxVoters: number;
      roundInfo: RoundInfo;
      startTime: Timestamp;
      voteOptionMap: string[];
      whitelistBackendPubkey: string;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  createAmaciRound: (
    {
      certificationSystem,
      circuitType,
      maxVoter,
      operator,
      oracleWhitelistPubkey,
      preDeactivateRoot,
      roundInfo,
      voiceCreditAmount,
      voteOptionMap,
      votingTime,
      whitelist,
    }: {
      certificationSystem: Uint256;
      circuitType: Uint256;
      maxVoter: Uint256;
      operator: Addr;
      oracleWhitelistPubkey?: string;
      preDeactivateRoot: Uint256;
      roundInfo: RoundInfo;
      voiceCreditAmount: Uint256;
      voteOptionMap: string[];
      votingTime: VotingTime;
      whitelist?: WhitelistBase;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  setRoundInfo: (
    {
      contractAddr,
      roundInfo,
    }: {
      contractAddr: string;
      roundInfo: RoundInfo;
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
  setVoteOptionsMap: (
    {
      contractAddr,
      voteOptionMap,
    }: {
      contractAddr: string;
      voteOptionMap: string[];
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>;
}
export class ApiSaasClient
  extends ApiSaasQueryClient
  implements ApiSaasInterface
{
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string
  ) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.updateMaciCodeId = this.updateMaciCodeId.bind(this);
    this.updateAmaciRegistryContract =
      this.updateAmaciRegistryContract.bind(this);
    this.addOperator = this.addOperator.bind(this);
    this.removeOperator = this.removeOperator.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.createMaciRound = this.createMaciRound.bind(this);
    this.createAmaciRound = this.createAmaciRound.bind(this);
    this.setRoundInfo = this.setRoundInfo.bind(this);
    this.setVoteOptionsMap = this.setVoteOptionsMap.bind(this);
  }
  updateConfig = async (
    {
      admin,
      denom,
    }: {
      admin?: Addr;
      denom?: string;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          admin,
          denom,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  updateMaciCodeId = async (
    {
      codeId,
    }: {
      codeId: number;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_maci_code_id: {
          code_id: codeId,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  updateAmaciRegistryContract = async (
    {
      registryContract,
    }: {
      registryContract: Addr;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_amaci_registry_contract: {
          registry_contract: registryContract,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  addOperator = async (
    {
      operator,
    }: {
      operator: Addr;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_operator: {
          operator,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  removeOperator = async (
    {
      operator,
    }: {
      operator: Addr;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_operator: {
          operator,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  deposit = async (
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        deposit: {},
      },
      fee,
      memo,
      _funds
    );
  };
  withdraw = async (
    {
      amount,
      recipient,
    }: {
      amount: Uint128;
      recipient?: Addr;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        withdraw: {
          amount,
          recipient,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  createMaciRound = async (
    {
      certificationSystem,
      circuitType,
      coordinator,
      endTime,
      maxVoters,
      roundInfo,
      startTime,
      voteOptionMap,
      whitelistBackendPubkey,
    }: {
      certificationSystem: Uint256;
      circuitType: Uint256;
      coordinator: PubKey;
      endTime: Timestamp;
      maxVoters: number;
      roundInfo: RoundInfo;
      startTime: Timestamp;
      voteOptionMap: string[];
      whitelistBackendPubkey: string;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        create_maci_round: {
          certification_system: certificationSystem,
          circuit_type: circuitType,
          coordinator,
          end_time: endTime,
          max_voters: maxVoters.toString(),
          round_info: roundInfo,
          start_time: startTime,
          vote_option_map: voteOptionMap,
          whitelist_backend_pubkey: whitelistBackendPubkey,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  createAmaciRound = async (
    {
      certificationSystem,
      circuitType,
      maxVoter,
      operator,
      oracleWhitelistPubkey,
      preDeactivateRoot,
      roundInfo,
      voiceCreditAmount,
      voteOptionMap,
      votingTime,
      whitelist,
    }: {
      certificationSystem: Uint256;
      circuitType: Uint256;
      maxVoter: Uint256;
      operator: Addr;
      oracleWhitelistPubkey?: string;
      preDeactivateRoot: Uint256;
      roundInfo: RoundInfo;
      voiceCreditAmount: Uint256;
      voteOptionMap: string[];
      votingTime: VotingTime;
      whitelist?: WhitelistBase;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        create_amaci_round: {
          certification_system: certificationSystem,
          circuit_type: circuitType,
          max_voter: maxVoter,
          operator,
          oracle_whitelist_pubkey: oracleWhitelistPubkey,
          pre_deactivate_root: preDeactivateRoot,
          round_info: roundInfo,
          voice_credit_amount: voiceCreditAmount,
          vote_option_map: voteOptionMap,
          voting_time: votingTime,
          whitelist,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  setRoundInfo = async (
    {
      contractAddr,
      roundInfo,
    }: {
      contractAddr: string;
      roundInfo: RoundInfo;
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_round_info: {
          contract_addr: contractAddr,
          round_info: roundInfo,
        },
      },
      fee,
      memo,
      _funds
    );
  };
  setVoteOptionsMap = async (
    {
      contractAddr,
      voteOptionMap,
    }: {
      contractAddr: string;
      voteOptionMap: string[];
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_vote_options_map: {
          contract_addr: contractAddr,
          vote_option_map: voteOptionMap,
        },
      },
      fee,
      memo,
      _funds
    );
  };
}
